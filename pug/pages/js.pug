extends ../parts/main.pug
block title
    - var title="Шпаргалка по HTML, CSS, JS -> Главная документация по JavaScript"
    - var css="../../other/css/style-js.css"
    - var js="active"
    - var logo="../../media/js1.png"
    - var script="../../other/js/script.js"
    - var navIndex="../../index.html"
    - var navHtml="./html.html"
    - var navCss="./css.html"
    - var navJs="./js.html"
block content
    .nav-container
        .nav-item
            button 
                h5.name Основы
            .dropdown-content
                a(href="#add") Подключение
                a(href="#main-commands") Основные команды   
                a(href="#variables") Переменные
                a(href="#math-operations") Математически операции
                a(href="#comparison-operators") Операторы сравнения
                a(href="#conditional-operators") Условные операторы
                a(href="#logical-operators") Логические операторы
                a(href="#data-types") Типы данных
                a(href="#functions") Функции
                a(href="#arrays") Массивы
                a(href="#array-methods") Методы массивов
                a(href="#objects") Объекты
                a(href="#forEach") Метод forEach
                a(href="#return") Возврат значение(return)
                a(href="#loops") Циклы
        .nav-item
            button 
                h5.name Изменение HTML
            .dropdown-content
                a(href="#variables") Переменные
                a(href="#get-elements") Получение элементов
                a(href="#element-content") Контент внутри элементов
                a(href="#universal-methods") Универсальные методы
                a(href="#classlist") classList 
                a(href="#events") События
            
    main
        section 
            h2 Испытание
            p 
                |В мобильной версии вы можете опробывать JavaScript в нашей 
                a(href="../../example.html") песочнице
                | )
        section#add
            h2 Подключение
            p
                |Подключение файла js к html. Или более быстрый вариант писать код прям в html.
            pre
                code.
                    &lt;script src="script.js"&gt;&lt;/script&gt;
                    &lt;script&gt;
                      /* код */
                    &lt;/script&gt;
            
        section#main-commands
            h2 Основные команды
            p
                code console.log 
                |используется для отображения информации в консоли.
                br
            pre
                code.
                    console.log("Текст" + имяПеременной) /* 1 вариант */
                    console.log(`Текст ${имяПеременной}`) /* 2 вариант */ 

                    /* Пример */
                    console.log(`5 + 5 + ${4 + 4}`) /* будет 5 + 5 + 8 */
            button.btn.btn-success(type="button" onclick="console.log(`5 + 5 + ${4 + 4}`)") Проверить
            p
                code alert() 
                | отображает всю информацию в всплывающем окне.
                br
            pre
                code.
                    alert("Текст" + имяПеременной) /* 1 вариант */
                    alert(`Текст ${имяПеременной}`) /* 2 вариант */

                    /* Пример */
                    alert(`5 + 5 + ${4 + 4}`) /* будет 5 + 5 + 8 */
            button.btn.btn-success(type="button" onclick="alert(`5 + 5 + ${4 + 4}`)") Проверить
            p
                code prompt() 
                | отображает всплывающее окно с текстом в скобках. Снизу находится поле ввода и записывает информацию в переменную. 
                br
            pre
                code.
                    let имяПеременной = prompt("Текст" + имяПеременной) /* записывает введенное 1 вариант */
                    let имяПеременной = prompt(`Текст ${имяПеременной}`) /* записывает введенное 2 вариант */
                    
                    /* Пример */
                    let a = prompt(`Введите а:`)
                    let b = prompt(`Введите а:`)
                    alert(a + b) /* будет соединение двух значений переменных т.к. они строчного типа данных */
            button.btn.btn-success(type="button" onclick="a = prompt(`Введите а:`); b = prompt(`Введите b:`); alert(a +b)") Проверить
            p
                code +prompt() 
                | записывает информацию, но только как числовой тип данных для сложения и других действий.
            pre
                code.
                    let имяПеременной = +prompt() /* записывает введённое как число */
                                        
                    /* Пример */
                    let a = +prompt(`Введите а:`)
                    let b = +prompt(`Введите а:`)
                    alert(a + b) /* будет математическое действие двух значений т.к. они числового типа данных */
            button.btn.btn-success(type="button" onclick="a = +prompt(`Введите а:`); b = +prompt(`Введите b:`); alert(a +b)") Проверить
            
        section#variables
            h2 Переменные
            p 
                | Создание переменной. Вызов же производится только именем переменной.
            pre
                code.
                    let имяПеременной = значение; /* можно менять значение */
                    const имяПеременной = значение; /* нельзя менять значение, обязательно сразу ввести значение */
                    var имяПеременной = значение;    /* локальная переменная только на одном уровне или выше */

                    /* Пример */
                    let a = число;
                    let b = 'Текст';

        section#math-operations
            h2 Математические операции
            p
                | Операторы, которые используют для вычислений. С помощью них можно делать вычисления используя переменные или числа.
                br
                | Таким образом можно создавать другие переменные.
            pre
                code.
                    + -- сложение
                    - -- вычитание
                    * -- умножение
                    / -- деление
                    ** -- возведение в степень
                    % -- деление по модулю

                    /* Пример */
                    let a = 5;
                    let b = 1;
                    alert(a - b) /* будет 4 */
                    alert(a + b) /* будет 6 */
                    alert('1' + 4) /* будет 14 т.к. если одно это строка, то и другое тоже.
            button.btn.btn-success(type="button" onclick="let a = 5; let b = 1; alert(a - b); alert(a + b); alert('1' + 4)") Проверить

            
        section#comparison-operators
            h2 Операторы сравнения
            p 
                | Нужны в основном для условных операторов.
            pre
                code.
                    == -- равенство
                    === -- строгое равенство (сравнивает ещё и типы данных)
                    != -- неравенство
                    !== -- строгое неравенство (сравнивает ещё и типы данных)
                    > -- больше
                    < -- меньше
                    >= -- больше, либо равно
                    <= -- меньше, либо равно

                    /* Пример */
                    if('1' == 1){} /* выполнится */
                    if('1' === 1){} /* не выполнится */
                    if(2 > 1){} /* выполнится */
                    if(2 < 1){} /* не выполнится */
            
        section#conditional-operators
            h2 Условные операторы
            p 
                | Для создания свойства и ветвления.
                br
                | Если в условии написана просто переменная, то это проверка на её существование('!' в начале проверка на НЕ существование).
            pre
                code.
                    if (Условие) {действия}
                    else {действия} /* если if не выполнилось */
            
        section#logical-operators
            h2 Логические операторы
            p 
                | Необходимы при задачи сразу нескольких свойств.
            pre
                code.
                    && -- И /* если оба условия верны */
                    || -- ИЛИ /* если хотя бы одно условие верно */

                    /* Пример */
                    if(15 > 10 && 15 < 11){} /* действие не выполнится */
                    if(15 > 10 || 15 < 11){} /* действие выполнится */
            
        section#data-types
            h2 Типы данных
            p 
                | Нужны для преобразования одного типа в другой при необходимости.
            pre
                code
                    | typeof(имяПеременной) -- проверка типа данных
                    | toString(имяПеременной) -- преобразование в строку
                    | parseInt(имяПеременной) -- преобразование в число
                    | isNaN(имяПеременной) -- проверка на числовой тип данных /* возвращает true если переменная не число */
            
        section#get-elements
            h2 Получение элементов
            p 
                | Нужно для доступа и управления html.
            pre
                code
                    | let имяПеременной = document.getElementById("id")
                    | let имяПеременной = document.getElementsByClassName("class")
                    | let имяПеременной = document.getElementsByTagName("tag")
                    | let имяПеременной = document.querySelector(".class/#id/tag") /* универсально, только первый попавшийся элемент */
                    | let имяПеременной = document.querySelectorAll(".class/#id/tag") /* универсально, все элементы */
            
        section#functions
            h2 Функции
            p 
                | Если вы не хотите всё время писать один и тот же код, то это вам пригодится.
                br
                | Вы можете каждый раз задавать новое значение переменной, которая находится в скобках при вызове функции.
            pre
                code.
                    Объявление:
                    function имяФункции(параметры, переменные например: имяПеременной, ...) {
                        действия
                    }
                    Вызов:
                    имяФункции(значение переменной имяПеременной)

                    /* Пример */
                    function example(a, b){
                        let result = a + b
                        alert(result)
                    }
                    example(5, 1) /* значение a и b. Так можно делать гибкие функции для нескольких случаев или элементов. */
            button.btn.btn-success(type='button' onclick='function example(a, b){let result = a + b; alert(result)}; example(5,1)') Проверить

        section#arrays
            h2 Массивы
            p
                | Нужны для хранения большого кол-ва данных ну или использование метода forEach. Каждый элемент имеет свой индекс(он начинается с нуля)
            pre
                code.
                    let имяПеременной = ["значение", ...] /* Создание массива */
                    имяПеременной[0/1/2/...] /* обращение к элементу, у каждого элемента есть индекс (начало с нуля) */
                    имяПеременной.length -- узнать длину массива

                    /* Пример */
                    let massiv = ['1', '2', '3', '4']
                    alert(`Имя массива: massiv. Значения массива: ${massiv[0]}, ${massiv[1]}, ${massiv[2]}, ${massiv[3]}. Длина массива: ${massiv.length}`)
            button.btn.btn-success(type='button' onclick='massiv = ["1", "2", "3", "4"]; alert(`Имя массива: massiv. Значения массива: ${massiv[0]}, ${massiv[1]}, ${massiv[2]}, ${massiv[3]}. Длина массива: ${massiv.length}`)') Проверить

        section#array-methods
            h2 Методы массивов
            p 
                | Необходимы для изменения имеющихся массивов.
            pre
                code.
                    имяПеременной.push("значение элемента", ...) /* добавление элементов в конец */
                    имяПеременной.unshift("значение элемента", ...) /* добавление элементов в начало */
                    имяПеременной.pop() /* удаление последнего элемента */
                    имяПеременной.shift() /* удаление первого элемента */
                    имяПеременной.splice(индекс с которого начинается удаление, кол-во удаляемых) /* удаление нескольких элементов */
            
        section#objects
            h2 Объекты
            p   
                | Обладают уникальным свойством-создавание переменных только внутри себя.
            pre
                code.
                    let имяОбъекта = { /* создание объекта */
                        имяПеременной: 'значение', /* создание свойства */
                        ... 
                    }
                    имяОбъекта.имяПеременной /* доступ к свойству */
                    this.имяПеременной /* доступ к свойству именно из этого объекта */
                    имяМетода() {действия} /* функция */

                    /* Пример */
                    let example = {
                        a: 3,
                        b: 4,
                        result(){
                            return this.a + this.b
                        }
                    }
                    alert(example.result())
            button.btn.btn-success(type='button' onclick='example = {a: 3, b: 4, result(){return this.a + this.b}} alert(example.result())') Проверить
     
        section#element-content
            h2 Контент внутри элементов
            p 
                | Шикарная вещь. Позволяет влиять на html.
            pre
                code.
                    Текстовый:
                    имяПеременной.textContent /* получение содержимого */
                    имяПеременной.textContent = "Текст" + имяПеременной /* изменение содержимого */
                    HTML:
                    имяПеременной.innerHTML /* получение содержимого */
                    имяПеременной.innerHTML = "Текст &lt;strong&gt;что-то&lt;/strong&gt;" /* изменение содержимого */
            
        section#universal-methods
            h2 Универсальные методы
            p 
                | С их помощью можно менять href, src и другие атрибуты. Активно используется в сложных ветвлениях.
            pre
                code.
                    имяПеременной.hasAttribute("Название атрибута типа id, class") /* проверка наличия атрибута */
                    имяПеременной.getAttribute("Название атрибута") /* получение значения атрибута */
                    имяПеременной.setAttribute("название атрибута", "значение") /* присвоение нового атрибута или переопределение значения */
                    имяПеременной.removeAttribute("Название атрибута") /* удаление атрибута */
            
        section#classlist
            h2 classList
            p   
                | Чуть менее могущественна, но также полезна. 
                code contains 
                | можно очень умно использовать в ветвлении.
            pre
                code.
                    имяПеременной.classList.add("class", "class2", "class3") /* добавление одного или нескольких классов */
                    имяПеременной.classList.remove("class", "class2", "class3") /* удаление одного или нескольких классов */
                    имяПеременной.classList.contains("main тип того") /* проверка наличия класса */
                    имяПеременной.classList.toggle("main тип того") /* переключение класса т.е. удаление или добавление */
            
        section#forEach
            h2 Метод forEach  
            p 
                | Очень полезная вещь. Перебирает каждый элемент массива и применяет действие к каждому. 
                br
                code item 
                | это переменная которая изображает данный элемент, к которому всё применяется.
                br
                | А 
                code [item] 
                | изображает индекс текущего элемента 
            pre
                code.
                    имяМассива.forEach(function(item[index]) {
                        console.log(item)
                    })
                    
                    /* Пример. Например у нас есть два массива и нам нужно сопоставить каждый элемент массива с элементом другого. */
                    имяМассива.forEach(function(элементПервогоМассива[index]){
                        let элементВторогоМассива = второйМассив[index] /* таким образом у нас есть элемент первого массива и элемент второго с таким же индексом */
                    })
            
        section#return
            h2 Возврат значений (return)
            p 
            | В функциях можно возвращать значения с помощью оператора 
            code return
            | . 
            br
            | Также можно останавливать текущий код на этом уровне(if, function, while, for).
            br
            | Это используется для ненужного выполнения следующего условия, если этого достаточно.
            br
            | Это конечно сложная вещь и сразу сложно понять для чего оно и зачем.

            | Пример:
            pre
                code.
                    function сумма(a, b) {
                        return a + b;
                    }
                    let результат = сумма(5, 3); // результат будет 8
                    function остановка(){
                        if(5 == 6){
                            alert(5)
                            return /* выполнение if останавливается */
                            alert(6) /* эта строчка не выполнится */
                        }
                    }
        section#loops
            h2 Циклы
            p 
            | В JavaScript есть несколько типов циклов. Примеры:
            pre
                code.
                    /* Цикл for */
                    for (let i = 0; i < 5; i++) {
                        console.log(i);
                    }
                    for(начало, условие, действие будет выполнятся пока условие не будет выполнено){}

                    // Цикл while
                    let i = 0;
                    while (i < 5) { /* Условие. Действие будет выполнятся пока условие не будет выполнено. */
                        console.log(i);
                        i++;
                    }

                    // Цикл do...while
                    let j = 0;
                    do {
                        console.log(j);
                        j++;
                    } while (j < 5);
            
        section#events
            h2 События
            p 
            | События используются для взаимодействия с пользователем. Примеры:
            pre
                code.
                    // Клик по кнопке
                    &lt;p onclick='функция() или действия'&gt;Текст&lt;/p&gt; /* при написания действий, необходимо писать ";" */

                    // Использование addEventListener
                    button.addEventListener("click", function() {
                        alert("Кнопка нажата!");
                    });

                    // Остановка всплытия события
                    element.addEventListener("click", function(event) {
                        event.stopPropagation();
                    });
