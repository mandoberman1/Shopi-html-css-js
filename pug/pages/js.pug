extends ../parts/main.pug
block title
    - var title="Документация по JavaScript"
    - var css='../../other/css/style-js.css'
    - var js="active"
    - var logo='../../media/js1.png'
    - var script='../../other/js/script.js'
    - var navIndex='../../index.html'
    - var navHtml='./html.html'
    - var navCss='./css.html'
    - var navJs='./js.html'
block content

    main
        section 
            h2 Испытание
            p 
                |В мобильной версии вы можете опробывать JavaScript в нашей 
                a(href='example-js.html') песочнице  
                | )
        section#add
            h2 Подключение
            p
                |Подключение файла js к html. Или более быстрый вариант писать код прям в html.
            pre
                code
                    | &lt;script src="script.js"&gt;&lt;/script&gt;
                    | &lt;script&gt;
                    br
                    |   /* код */
                    | &lt;/script&gt;
            a(href='example-js.html') Песочница
        section#main-commands
            h2 Основные команды
            p
                code console.log 
                |используется для отображения информации в консоли.
                br
            pre
                code.
                    console.log("Текст" + имяПеременной) /* 1 вариант */
                    console.log(`Текст ${имяПеременной}`) /* 2 вариант */ 
            p
                code alert() 
                | отображает всю информацию в всплывающем окне.
                br
            pre
                code.
                    alert("Текст" + имяПеременной) /* 1 вариант */
                    alert(`Текст ${имяПеременной}`) /* 2 вариант */
            p
                code prompt() 
                | отображает всплывающее окно с текстом в скобках. Снизу находится поле ввода и записывает информацию в переменную. 
                br
            pre
                code.
                    let имяПеременной = prompt("Текст" + имяПеременной) /* записывает введенное 1 вариант */
                    let имяПеременной = prompt(`Текст ${имяПеременной}`) /* записывает введенное 2 вариант */
            p
                code +prompt() 
                | записывает информацию, но только как числовой тип данных для сложения и других действий.
            pre
                code.  
                    let имяПеременной = +prompt() /* записывает введённое как число */
            a(href='example-js.html') Песочница
        section#variables
            h2 Переменные
            p 
                | Создание переменной. Вызов же производится без let/const/var
            pre
                code
                    | let имяПеременной = значение; /* можно менять значение */
                    | const имяПеременной = значение; /* нельзя менять значение, обязательно сразу ввести значение */
                    | var имяПеременной = значение;    /* локальная переменная только на одном уровне или выше */
            a(href='example-js.html') Песочница
        section#math-operations
            h2 Математические операции
            p
                | Операторы, которые используют для вычислений. С помощью них можно делать вычисления используя переменные или числа.
                br
                | Таким образом можно создавать другие переменные.
            pre
                code
                    | + -- сложение
                    | - -- вычитание
                    | * -- умножение
                    | / -- деление
                    | ** -- возведение в степень
                    | % -- деление по модулю
                    | /* Пример */
                    | let a = 5;
                    | let b = 1;
                    | let result = a + b; /* будет 6 */
                    | alert(a + b) /* отобразится 6 */
                    | let example = 1 + '4' /* будет 14 т.к. если одно это строка, то и другое тоже.
            a(href='example-js.html') Песочница
        section#comparison-operators
            h2 Операторы сравнения
            p 
                | Нужны в основном для условных операторов.
            pre
                code
                    | == -- равенство
                    | === -- строгое равенство (сравнивает ещё и типы данных)
                    | != -- неравенство
                    | !== -- строгое неравенство (сравнивает ещё и типы данных)
                    | > -- больше
                    | < -- меньше
                    | >= -- больше, либо равно
                    | <= -- меньше, либо равно
                    | /* Пример */
                    | if(example == 1)
            a(href='example-js.html') Песочница
        section#conditional-operators
            h2 Условные операторы
            p 
                | Для создания свойства и ветвления. Если в условии написана просто переменная, то это проверка на её существование.
            pre
                code
                    | if (Условие) {действия}
                    | else {действия} /* если if не выполнилось */
            a(href='example-js.html') Песочница
        section#logical-operators
            h2 Логические операторы
            p 
                | Необходимы при задачи сразу нескольких свойств.
            pre
                code
                    | && -- И /* если оба условия верны */
                    | || -- ИЛИ /* если хотя бы одно условие верно */
                    | /* Пример */
                    | if(15 > 10 && 15 < 11){} /* действие не выполнится */
                    | if(15 > 10 || 15 < 11){} /* действие выполнится */
            a(href='example-js.html') Песочница
        section#data-types
            h2 Типы данных
            p 
                | Нужны для преобразования одного типа в другой при необходимости.
            pre
                code
                    | typeof(имяПеременной) -- проверка типа данных
                    | toString(имяПеременной) -- преобразование в строку
                    | parseInt(имяПеременной) -- преобразование в число
                    | isNaN(имяПеременной) -- проверка на числовой тип данных /* возвращает true если переменная не число */
            a(href='example-js.html') Песочница
        section#get-elements
            h2 Получение элементов
            p 
                | Нужно для доступа и управления html.
            pre
                code
                    | let имяПеременной = document.getElementById('id')
                    | let имяПеременной = document.getElementsByClassName('class')
                    | let имяПеременной = document.getElementsByTagName('tag')
                    | let имяПеременной = document.querySelector('.class/#id/tag') /* универсально, только первый попавшийся элемент */
                    | let имяПеременной = document.querySelectorAll('.class/#id/tag') /* универсально, все элементы */
            a(href='example-js.html') Песочница
        section#functions
            h2 Функции
            p 
                | Если вы не хотите всё время писать один и тот же код, то это вам пригодится.
                br
                | Вы можете каждый раз задавать новое значение переменной, которая находится в скобках при вызове функции.
            pre
                code
                    | Объявление:
                    | function имяФункции(параметры, переменные например: имяПеременной, ...) {
                    |     действия
                    | }
                    | Вызов:
                    | имяФункции(значение переменной имяПеременной)
            a(href='example-js.html') Песочница
        section#arrays
            h2 Массивы
            p
                | Нужны для хранения большого кол-ва данных ну или использование метода forEach. Каждый элемент имеет свой индекс(он начинается с нуля)
            pre
                code
                    | let имяПеременной = ['значение', ...] /* Создание массива */
                    | имяПеременной[0/1/2/...] /* обращение к элементу, у каждого элемента есть индекс (начало с нуля) */
                    | имяПеременной.length -- узнать длину массива
            a(href='example-js.html') Песочница
        section#array-methods
            h2 Методы массивов
            p 
                | Необходимы для изменения имеющихся массивов.
            pre
                code
                    | имяПеременной.push('значение элемента', ...) /* добавление элементов в конец */
                    | имяПеременной.unshift('значение элемента', ...) /* добавление элементов в начало */
                    | имяПеременной.pop() /* удаление последнего элемента */
                    | имяПеременной.shift() /* удаление первого элемента */
                    | имяПеременной.splice(индекс с которого начинается удаление, кол-во удаляемых) /* удаление нескольких элементов */
            a(href='example-js.html') Песочница
        section#objects
            h2 Объекты
            p   
                | Обладают уникальным свойством-создавание переменных только внутри себя.
            pre
                code
                    | let имяОбъекта = { /* создание объекта */
                    |     имяПеременной: значение, /* создание свойства */
                    |     ... 
                    | }
                    | имяОбъекта.имяПеременной /* доступ к свойству */
                    | this.имяПеременной /* доступ к свойству именно из этого объекта */
                    |имяМетода() {действия} /* функция */
            a(href='example-js.html') Песочница
        section#element-content
            h2 Контент внутри элементов
            p 
                | Шикарная вещь. Позволяет влиять на html.
            pre
                code
                    | Текстовый:
                    | имяПеременной.textContent /* получение содержимого */
                    | имяПеременной.textContent = 'Текст' + имяПеременной /* изменение содержимого */
                    | HTML:
                    | имяПеременной.innerHTML /* получение содержимого */
                    | имяПеременной.innerHTML = 'Текст<strong>что-то</strong>' /* изменение содержимого */
            a(href='example-js.html') Песочница
        section#universal-methods
            h2 Универсальные методы
            p 
                | С их помощью можно менять href, src и другие атрибуты. Активно используется в сложных ветвлениях.
            pre
                code
                    | имяПеременной.hasAttribute('Название атрибута типа id, class') /* проверка наличия атрибута */
                    | имяПеременной.getAttribute('Название атрибута') /* получение значения атрибута */
                    | имяПеременной.setAttribute('название атрибута', 'значение') /* присвоение нового атрибута или переопределение значения */
                    | имяПеременной.removeAttribute('Название атрибута') /* удаление атрибута */
            a(href='example-js.html') Песочница
        section#classlist
            h2 classList
            p   
                | Чуть менее могущественна, но также полезна. 
                code contains 
                | можно очень умно использовать в ветвлении.
            pre
                code
                    | имяПеременной.classList.add('class', 'class2', 'class3') /* добавление одного или нескольких классов */
                    | имяПеременной.classList.remove('class', 'class2', 'class3') /* удаление одного или нескольких классов */
                    | имяПеременной.classList.contains('main тип того') /* проверка наличия класса */
                    | имяПеременной.classList.toggle('main тип того') /* переключение класса т.е. удаление или добавление */
            a(href='example-js.html') Песочница
        section#reminders
            h2 Метод forEach  
            p 
                | Очень полезная вещь. Перебирает каждый элемент массива и применяет действие к каждому. 
                br
                code item 
                | это переменная которая изображает данный элемент, к которому всё применяется.
            pre
                code
                    | имяМассива.forEach(function(item) {
                    |     console.log(item)
                    | })
            a(href='example-js.html') Песочница
        section#return
            h2 Возврат значений (return)
            p 
            | В функциях можно возвращать значения с помощью оператора 
            code return
            | .
            br
            | Это конечно сложная вещь и сразу сложно понять для чего оно и зачем.

            | Пример:
            pre
                code
                    | function сумма(a, b) {
                    br
                    | &nbsp;&nbsp;return a + b;
                    br
                    | }
                    br
                    | let результат = сумма(5, 3); // результат будет 8
            a(href='example-js.html') Песочница
        section#loops
            h2 Циклы
            p 
            | В JavaScript есть несколько типов циклов. Примеры:
            pre
                code
                    | // Цикл for
                    br
                    | for (let i = 0; i < 5; i++) {
                    br
                    | &nbsp;&nbsp;console.log(i);
                    br
                    | }
                    |for(начало, условие, действие будет выполнятся пока условие не будет выполнено){}
                    br
                    | // Цикл while
                    br
                    | let i = 0;
                    br
                    | while (i < 5) { /* Условие */
                    br
                    | &nbsp;&nbsp;console.log(i);
                    br
                    | &nbsp;&nbsp;i++;
                    br
                    | }
                    br
                    | // Цикл do...while
                    br
                    | let j = 0;
                    br
                    | do {
                    br
                    | &nbsp;&nbsp;console.log(j);
                    br
                    | &nbsp;&nbsp;j++;
                    br
                    | } while (j < 5);
            a(href='example-js.html') Песочница
        section#events
            h2 События
            p 
            | События используются для взаимодействия с пользователем. Примеры:
            pre
                code
                    | // Клик по кнопке
                    br
                    | button.onclick = function() {
                    br
                    | &nbsp;&nbsp;alert('Кнопка нажата!');
                    br
                    | };
                    br
                    | // Использование addEventListener
                    br
                    | button.addEventListener('click', function() {
                    br
                    | &nbsp;&nbsp;alert('Кнопка нажата!');
                    br
                    | });
                    br
                    | // Остановка всплытия события
                    br
                    | element.addEventListener('click', function(event) {
                    br
                    | &nbsp;&nbsp;event.stopPropagation();
                    br
                    | });
